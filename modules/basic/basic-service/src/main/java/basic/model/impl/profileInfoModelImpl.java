/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.profileInfo;
import basic.model.profileInfoModel;
import basic.model.profileInfoSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the profileInfo service. Represents a row in the &quot;profileInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>profileInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link profileInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see profileInfoImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class profileInfoModelImpl
	extends BaseModelImpl<profileInfo> implements profileInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile info model instance should use the <code>profileInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "profileInfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"title", Types.VARCHAR}, {"firstName", Types.VARCHAR},
		{"fatherName", Types.VARCHAR}, {"grandfatherName", Types.VARCHAR},
		{"familyName", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"primaryMobileNo", Types.BIGINT}, {"secondaryMobileNo", Types.BIGINT},
		{"gender", Types.VARCHAR}, {"nationality", Types.VARCHAR},
		{"nationalId", Types.BIGINT}, {"passportId", Types.BIGINT},
		{"passportExpireDate", Types.TIMESTAMP},
		{"dateOfBirth", Types.TIMESTAMP},
		{"currentEducationTrainingStatus", Types.VARCHAR},
		{"countryOfResidence", Types.VARCHAR},
		{"cityOfResidence", Types.VARCHAR}, {"nationalAddress", Types.VARCHAR},
		{"postalCode", Types.VARCHAR}, {"street", Types.VARCHAR},
		{"state_", Types.VARCHAR}, {"about", Types.VARCHAR},
		{"profileimage", Types.VARCHAR}, {"universitygeneral", Types.VARCHAR},
		{"currentworkposition", Types.VARCHAR},
		{"currentworklocation", Types.VARCHAR},
		{"educationField", Types.VARCHAR}, {"isEmailVerified", Types.VARCHAR},
		{"isMobileVerified", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("grandfatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("familyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("primaryMobileNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("secondaryMobileNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationality", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("passportExpireDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("currentEducationTrainingStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("countryOfResidence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cityOfResidence", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("postalCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("street", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("about", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("profileimage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("universitygeneral", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentworkposition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentworklocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("educationField", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isEmailVerified", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("isMobileVerified", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table profileInfo (uuid_ VARCHAR(75) null,id_ LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,title VARCHAR(75) null,firstName VARCHAR(75) null,fatherName VARCHAR(75) null,grandfatherName VARCHAR(75) null,familyName VARCHAR(75) null,email VARCHAR(75) null,primaryMobileNo LONG,secondaryMobileNo LONG,gender VARCHAR(75) null,nationality VARCHAR(75) null,nationalId LONG,passportId LONG,passportExpireDate DATE null,dateOfBirth DATE null,currentEducationTrainingStatus VARCHAR(75) null,countryOfResidence VARCHAR(75) null,cityOfResidence VARCHAR(75) null,nationalAddress VARCHAR(75) null,postalCode VARCHAR(75) null,street VARCHAR(75) null,state_ VARCHAR(75) null,about VARCHAR(75) null,profileimage VARCHAR(75) null,universitygeneral VARCHAR(75) null,currentworkposition VARCHAR(75) null,currentworklocation VARCHAR(75) null,educationField VARCHAR(75) null,isEmailVerified VARCHAR(75) null,isMobileVerified VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table profileInfo";

	public static final String ORDER_BY_JPQL = " ORDER BY profileInfo.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY profileInfo.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static profileInfo toModel(profileInfoSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		profileInfo model = new profileInfoImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setTitle(soapModel.getTitle());
		model.setFirstName(soapModel.getFirstName());
		model.setFatherName(soapModel.getFatherName());
		model.setGrandfatherName(soapModel.getGrandfatherName());
		model.setFamilyName(soapModel.getFamilyName());
		model.setEmail(soapModel.getEmail());
		model.setPrimaryMobileNo(soapModel.getPrimaryMobileNo());
		model.setSecondaryMobileNo(soapModel.getSecondaryMobileNo());
		model.setGender(soapModel.getGender());
		model.setNationality(soapModel.getNationality());
		model.setNationalId(soapModel.getNationalId());
		model.setPassportId(soapModel.getPassportId());
		model.setPassportExpireDate(soapModel.getPassportExpireDate());
		model.setDateOfBirth(soapModel.getDateOfBirth());
		model.setCurrentEducationTrainingStatus(
			soapModel.getCurrentEducationTrainingStatus());
		model.setCountryOfResidence(soapModel.getCountryOfResidence());
		model.setCityOfResidence(soapModel.getCityOfResidence());
		model.setNationalAddress(soapModel.getNationalAddress());
		model.setPostalCode(soapModel.getPostalCode());
		model.setStreet(soapModel.getStreet());
		model.setState(soapModel.getState());
		model.setAbout(soapModel.getAbout());
		model.setProfileimage(soapModel.getProfileimage());
		model.setUniversitygeneral(soapModel.getUniversitygeneral());
		model.setCurrentworkposition(soapModel.getCurrentworkposition());
		model.setCurrentworklocation(soapModel.getCurrentworklocation());
		model.setEducationField(soapModel.getEducationField());
		model.setIsEmailVerified(soapModel.getIsEmailVerified());
		model.setIsMobileVerified(soapModel.getIsMobileVerified());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<profileInfo> toModels(profileInfoSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<profileInfo> models = new ArrayList<profileInfo>(
			soapModels.length);

		for (profileInfoSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public profileInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return profileInfo.class;
	}

	@Override
	public String getModelClassName() {
		return profileInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<profileInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<profileInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((profileInfo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<profileInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<profileInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(profileInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<profileInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<profileInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, profileInfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			profileInfo.class.getClassLoader(), profileInfo.class,
			ModelWrapper.class);

		try {
			Constructor<profileInfo> constructor =
				(Constructor<profileInfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<profileInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<profileInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<profileInfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<profileInfo, Object>>();
		Map<String, BiConsumer<profileInfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<profileInfo, ?>>();

		attributeGetterFunctions.put("uuid", profileInfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<profileInfo, String>)profileInfo::setUuid);
		attributeGetterFunctions.put("id", profileInfo::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<profileInfo, Long>)profileInfo::setId);
		attributeGetterFunctions.put("groupId", profileInfo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<profileInfo, Long>)profileInfo::setGroupId);
		attributeGetterFunctions.put("companyId", profileInfo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<profileInfo, Long>)profileInfo::setCompanyId);
		attributeGetterFunctions.put("userId", profileInfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<profileInfo, Long>)profileInfo::setUserId);
		attributeGetterFunctions.put("userName", profileInfo::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<profileInfo, String>)profileInfo::setUserName);
		attributeGetterFunctions.put("createDate", profileInfo::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<profileInfo, Date>)profileInfo::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", profileInfo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<profileInfo, Date>)profileInfo::setModifiedDate);
		attributeGetterFunctions.put("title", profileInfo::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<profileInfo, String>)profileInfo::setTitle);
		attributeGetterFunctions.put("firstName", profileInfo::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName",
			(BiConsumer<profileInfo, String>)profileInfo::setFirstName);
		attributeGetterFunctions.put("fatherName", profileInfo::getFatherName);
		attributeSetterBiConsumers.put(
			"fatherName",
			(BiConsumer<profileInfo, String>)profileInfo::setFatherName);
		attributeGetterFunctions.put(
			"grandfatherName", profileInfo::getGrandfatherName);
		attributeSetterBiConsumers.put(
			"grandfatherName",
			(BiConsumer<profileInfo, String>)profileInfo::setGrandfatherName);
		attributeGetterFunctions.put("familyName", profileInfo::getFamilyName);
		attributeSetterBiConsumers.put(
			"familyName",
			(BiConsumer<profileInfo, String>)profileInfo::setFamilyName);
		attributeGetterFunctions.put("email", profileInfo::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<profileInfo, String>)profileInfo::setEmail);
		attributeGetterFunctions.put(
			"primaryMobileNo", profileInfo::getPrimaryMobileNo);
		attributeSetterBiConsumers.put(
			"primaryMobileNo",
			(BiConsumer<profileInfo, Long>)profileInfo::setPrimaryMobileNo);
		attributeGetterFunctions.put(
			"secondaryMobileNo", profileInfo::getSecondaryMobileNo);
		attributeSetterBiConsumers.put(
			"secondaryMobileNo",
			(BiConsumer<profileInfo, Long>)profileInfo::setSecondaryMobileNo);
		attributeGetterFunctions.put("gender", profileInfo::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<profileInfo, String>)profileInfo::setGender);
		attributeGetterFunctions.put(
			"nationality", profileInfo::getNationality);
		attributeSetterBiConsumers.put(
			"nationality",
			(BiConsumer<profileInfo, String>)profileInfo::setNationality);
		attributeGetterFunctions.put("nationalId", profileInfo::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<profileInfo, Long>)profileInfo::setNationalId);
		attributeGetterFunctions.put("passportId", profileInfo::getPassportId);
		attributeSetterBiConsumers.put(
			"passportId",
			(BiConsumer<profileInfo, Long>)profileInfo::setPassportId);
		attributeGetterFunctions.put(
			"passportExpireDate", profileInfo::getPassportExpireDate);
		attributeSetterBiConsumers.put(
			"passportExpireDate",
			(BiConsumer<profileInfo, Date>)profileInfo::setPassportExpireDate);
		attributeGetterFunctions.put(
			"dateOfBirth", profileInfo::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<profileInfo, Date>)profileInfo::setDateOfBirth);
		attributeGetterFunctions.put(
			"currentEducationTrainingStatus",
			profileInfo::getCurrentEducationTrainingStatus);
		attributeSetterBiConsumers.put(
			"currentEducationTrainingStatus",
			(BiConsumer<profileInfo, String>)
				profileInfo::setCurrentEducationTrainingStatus);
		attributeGetterFunctions.put(
			"countryOfResidence", profileInfo::getCountryOfResidence);
		attributeSetterBiConsumers.put(
			"countryOfResidence",
			(BiConsumer<profileInfo, String>)
				profileInfo::setCountryOfResidence);
		attributeGetterFunctions.put(
			"cityOfResidence", profileInfo::getCityOfResidence);
		attributeSetterBiConsumers.put(
			"cityOfResidence",
			(BiConsumer<profileInfo, String>)profileInfo::setCityOfResidence);
		attributeGetterFunctions.put(
			"nationalAddress", profileInfo::getNationalAddress);
		attributeSetterBiConsumers.put(
			"nationalAddress",
			(BiConsumer<profileInfo, String>)profileInfo::setNationalAddress);
		attributeGetterFunctions.put("postalCode", profileInfo::getPostalCode);
		attributeSetterBiConsumers.put(
			"postalCode",
			(BiConsumer<profileInfo, String>)profileInfo::setPostalCode);
		attributeGetterFunctions.put("street", profileInfo::getStreet);
		attributeSetterBiConsumers.put(
			"street", (BiConsumer<profileInfo, String>)profileInfo::setStreet);
		attributeGetterFunctions.put("state", profileInfo::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<profileInfo, String>)profileInfo::setState);
		attributeGetterFunctions.put("about", profileInfo::getAbout);
		attributeSetterBiConsumers.put(
			"about", (BiConsumer<profileInfo, String>)profileInfo::setAbout);
		attributeGetterFunctions.put(
			"profileimage", profileInfo::getProfileimage);
		attributeSetterBiConsumers.put(
			"profileimage",
			(BiConsumer<profileInfo, String>)profileInfo::setProfileimage);
		attributeGetterFunctions.put(
			"universitygeneral", profileInfo::getUniversitygeneral);
		attributeSetterBiConsumers.put(
			"universitygeneral",
			(BiConsumer<profileInfo, String>)profileInfo::setUniversitygeneral);
		attributeGetterFunctions.put(
			"currentworkposition", profileInfo::getCurrentworkposition);
		attributeSetterBiConsumers.put(
			"currentworkposition",
			(BiConsumer<profileInfo, String>)
				profileInfo::setCurrentworkposition);
		attributeGetterFunctions.put(
			"currentworklocation", profileInfo::getCurrentworklocation);
		attributeSetterBiConsumers.put(
			"currentworklocation",
			(BiConsumer<profileInfo, String>)
				profileInfo::setCurrentworklocation);
		attributeGetterFunctions.put(
			"educationField", profileInfo::getEducationField);
		attributeSetterBiConsumers.put(
			"educationField",
			(BiConsumer<profileInfo, String>)profileInfo::setEducationField);
		attributeGetterFunctions.put(
			"isEmailVerified", profileInfo::getIsEmailVerified);
		attributeSetterBiConsumers.put(
			"isEmailVerified",
			(BiConsumer<profileInfo, String>)profileInfo::setIsEmailVerified);
		attributeGetterFunctions.put(
			"isMobileVerified", profileInfo::getIsMobileVerified);
		attributeSetterBiConsumers.put(
			"isMobileVerified",
			(BiConsumer<profileInfo, String>)profileInfo::setIsMobileVerified);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		_fatherName = fatherName;
	}

	@JSON
	@Override
	public String getGrandfatherName() {
		if (_grandfatherName == null) {
			return "";
		}
		else {
			return _grandfatherName;
		}
	}

	@Override
	public void setGrandfatherName(String grandfatherName) {
		_grandfatherName = grandfatherName;
	}

	@JSON
	@Override
	public String getFamilyName() {
		if (_familyName == null) {
			return "";
		}
		else {
			return _familyName;
		}
	}

	@Override
	public void setFamilyName(String familyName) {
		_familyName = familyName;
	}

	@JSON
	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@JSON
	@Override
	public long getPrimaryMobileNo() {
		return _primaryMobileNo;
	}

	@Override
	public void setPrimaryMobileNo(long primaryMobileNo) {
		_primaryMobileNo = primaryMobileNo;
	}

	@JSON
	@Override
	public long getSecondaryMobileNo() {
		return _secondaryMobileNo;
	}

	@Override
	public void setSecondaryMobileNo(long secondaryMobileNo) {
		_secondaryMobileNo = secondaryMobileNo;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@JSON
	@Override
	public String getNationality() {
		if (_nationality == null) {
			return "";
		}
		else {
			return _nationality;
		}
	}

	@Override
	public void setNationality(String nationality) {
		_nationality = nationality;
	}

	@JSON
	@Override
	public long getNationalId() {
		return _nationalId;
	}

	@Override
	public void setNationalId(long nationalId) {
		_nationalId = nationalId;
	}

	@JSON
	@Override
	public long getPassportId() {
		return _passportId;
	}

	@Override
	public void setPassportId(long passportId) {
		_passportId = passportId;
	}

	@JSON
	@Override
	public Date getPassportExpireDate() {
		return _passportExpireDate;
	}

	@Override
	public void setPassportExpireDate(Date passportExpireDate) {
		_passportExpireDate = passportExpireDate;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getCurrentEducationTrainingStatus() {
		if (_currentEducationTrainingStatus == null) {
			return "";
		}
		else {
			return _currentEducationTrainingStatus;
		}
	}

	@Override
	public void setCurrentEducationTrainingStatus(
		String currentEducationTrainingStatus) {

		_currentEducationTrainingStatus = currentEducationTrainingStatus;
	}

	@JSON
	@Override
	public String getCountryOfResidence() {
		if (_countryOfResidence == null) {
			return "";
		}
		else {
			return _countryOfResidence;
		}
	}

	@Override
	public void setCountryOfResidence(String countryOfResidence) {
		_countryOfResidence = countryOfResidence;
	}

	@JSON
	@Override
	public String getCityOfResidence() {
		if (_cityOfResidence == null) {
			return "";
		}
		else {
			return _cityOfResidence;
		}
	}

	@Override
	public void setCityOfResidence(String cityOfResidence) {
		_cityOfResidence = cityOfResidence;
	}

	@JSON
	@Override
	public String getNationalAddress() {
		if (_nationalAddress == null) {
			return "";
		}
		else {
			return _nationalAddress;
		}
	}

	@Override
	public void setNationalAddress(String nationalAddress) {
		_nationalAddress = nationalAddress;
	}

	@JSON
	@Override
	public String getPostalCode() {
		if (_postalCode == null) {
			return "";
		}
		else {
			return _postalCode;
		}
	}

	@Override
	public void setPostalCode(String postalCode) {
		_postalCode = postalCode;
	}

	@JSON
	@Override
	public String getStreet() {
		if (_street == null) {
			return "";
		}
		else {
			return _street;
		}
	}

	@Override
	public void setStreet(String street) {
		_street = street;
	}

	@JSON
	@Override
	public String getState() {
		if (_state == null) {
			return "";
		}
		else {
			return _state;
		}
	}

	@Override
	public void setState(String state) {
		_state = state;
	}

	@JSON
	@Override
	public String getAbout() {
		if (_about == null) {
			return "";
		}
		else {
			return _about;
		}
	}

	@Override
	public void setAbout(String about) {
		_about = about;
	}

	@JSON
	@Override
	public String getProfileimage() {
		if (_profileimage == null) {
			return "";
		}
		else {
			return _profileimage;
		}
	}

	@Override
	public void setProfileimage(String profileimage) {
		_profileimage = profileimage;
	}

	@JSON
	@Override
	public String getUniversitygeneral() {
		if (_universitygeneral == null) {
			return "";
		}
		else {
			return _universitygeneral;
		}
	}

	@Override
	public void setUniversitygeneral(String universitygeneral) {
		_universitygeneral = universitygeneral;
	}

	@JSON
	@Override
	public String getCurrentworkposition() {
		if (_currentworkposition == null) {
			return "";
		}
		else {
			return _currentworkposition;
		}
	}

	@Override
	public void setCurrentworkposition(String currentworkposition) {
		_currentworkposition = currentworkposition;
	}

	@JSON
	@Override
	public String getCurrentworklocation() {
		if (_currentworklocation == null) {
			return "";
		}
		else {
			return _currentworklocation;
		}
	}

	@Override
	public void setCurrentworklocation(String currentworklocation) {
		_currentworklocation = currentworklocation;
	}

	@JSON
	@Override
	public String getEducationField() {
		if (_educationField == null) {
			return "";
		}
		else {
			return _educationField;
		}
	}

	@Override
	public void setEducationField(String educationField) {
		_educationField = educationField;
	}

	@JSON
	@Override
	public String getIsEmailVerified() {
		if (_isEmailVerified == null) {
			return "";
		}
		else {
			return _isEmailVerified;
		}
	}

	@Override
	public void setIsEmailVerified(String isEmailVerified) {
		_isEmailVerified = isEmailVerified;
	}

	@JSON
	@Override
	public String getIsMobileVerified() {
		if (_isMobileVerified == null) {
			return "";
		}
		else {
			return _isMobileVerified;
		}
	}

	@Override
	public void setIsMobileVerified(String isMobileVerified) {
		_isMobileVerified = isMobileVerified;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(profileInfo.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), profileInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public profileInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, profileInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		profileInfoImpl profileInfoImpl = new profileInfoImpl();

		profileInfoImpl.setUuid(getUuid());
		profileInfoImpl.setId(getId());
		profileInfoImpl.setGroupId(getGroupId());
		profileInfoImpl.setCompanyId(getCompanyId());
		profileInfoImpl.setUserId(getUserId());
		profileInfoImpl.setUserName(getUserName());
		profileInfoImpl.setCreateDate(getCreateDate());
		profileInfoImpl.setModifiedDate(getModifiedDate());
		profileInfoImpl.setTitle(getTitle());
		profileInfoImpl.setFirstName(getFirstName());
		profileInfoImpl.setFatherName(getFatherName());
		profileInfoImpl.setGrandfatherName(getGrandfatherName());
		profileInfoImpl.setFamilyName(getFamilyName());
		profileInfoImpl.setEmail(getEmail());
		profileInfoImpl.setPrimaryMobileNo(getPrimaryMobileNo());
		profileInfoImpl.setSecondaryMobileNo(getSecondaryMobileNo());
		profileInfoImpl.setGender(getGender());
		profileInfoImpl.setNationality(getNationality());
		profileInfoImpl.setNationalId(getNationalId());
		profileInfoImpl.setPassportId(getPassportId());
		profileInfoImpl.setPassportExpireDate(getPassportExpireDate());
		profileInfoImpl.setDateOfBirth(getDateOfBirth());
		profileInfoImpl.setCurrentEducationTrainingStatus(
			getCurrentEducationTrainingStatus());
		profileInfoImpl.setCountryOfResidence(getCountryOfResidence());
		profileInfoImpl.setCityOfResidence(getCityOfResidence());
		profileInfoImpl.setNationalAddress(getNationalAddress());
		profileInfoImpl.setPostalCode(getPostalCode());
		profileInfoImpl.setStreet(getStreet());
		profileInfoImpl.setState(getState());
		profileInfoImpl.setAbout(getAbout());
		profileInfoImpl.setProfileimage(getProfileimage());
		profileInfoImpl.setUniversitygeneral(getUniversitygeneral());
		profileInfoImpl.setCurrentworkposition(getCurrentworkposition());
		profileInfoImpl.setCurrentworklocation(getCurrentworklocation());
		profileInfoImpl.setEducationField(getEducationField());
		profileInfoImpl.setIsEmailVerified(getIsEmailVerified());
		profileInfoImpl.setIsMobileVerified(getIsMobileVerified());

		profileInfoImpl.resetOriginalValues();

		return profileInfoImpl;
	}

	@Override
	public int compareTo(profileInfo profileInfo) {
		long primaryKey = profileInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof profileInfo)) {
			return false;
		}

		profileInfo profileInfo = (profileInfo)obj;

		long primaryKey = profileInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		profileInfoModelImpl profileInfoModelImpl = this;

		profileInfoModelImpl._originalUuid = profileInfoModelImpl._uuid;

		profileInfoModelImpl._originalGroupId = profileInfoModelImpl._groupId;

		profileInfoModelImpl._setOriginalGroupId = false;

		profileInfoModelImpl._originalCompanyId =
			profileInfoModelImpl._companyId;

		profileInfoModelImpl._setOriginalCompanyId = false;

		profileInfoModelImpl._setModifiedDate = false;

		profileInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<profileInfo> toCacheModel() {
		profileInfoCacheModel profileInfoCacheModel =
			new profileInfoCacheModel();

		profileInfoCacheModel.uuid = getUuid();

		String uuid = profileInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			profileInfoCacheModel.uuid = null;
		}

		profileInfoCacheModel.id = getId();

		profileInfoCacheModel.groupId = getGroupId();

		profileInfoCacheModel.companyId = getCompanyId();

		profileInfoCacheModel.userId = getUserId();

		profileInfoCacheModel.userName = getUserName();

		String userName = profileInfoCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			profileInfoCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			profileInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			profileInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			profileInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			profileInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		profileInfoCacheModel.title = getTitle();

		String title = profileInfoCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			profileInfoCacheModel.title = null;
		}

		profileInfoCacheModel.firstName = getFirstName();

		String firstName = profileInfoCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			profileInfoCacheModel.firstName = null;
		}

		profileInfoCacheModel.fatherName = getFatherName();

		String fatherName = profileInfoCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			profileInfoCacheModel.fatherName = null;
		}

		profileInfoCacheModel.grandfatherName = getGrandfatherName();

		String grandfatherName = profileInfoCacheModel.grandfatherName;

		if ((grandfatherName != null) && (grandfatherName.length() == 0)) {
			profileInfoCacheModel.grandfatherName = null;
		}

		profileInfoCacheModel.familyName = getFamilyName();

		String familyName = profileInfoCacheModel.familyName;

		if ((familyName != null) && (familyName.length() == 0)) {
			profileInfoCacheModel.familyName = null;
		}

		profileInfoCacheModel.email = getEmail();

		String email = profileInfoCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			profileInfoCacheModel.email = null;
		}

		profileInfoCacheModel.primaryMobileNo = getPrimaryMobileNo();

		profileInfoCacheModel.secondaryMobileNo = getSecondaryMobileNo();

		profileInfoCacheModel.gender = getGender();

		String gender = profileInfoCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			profileInfoCacheModel.gender = null;
		}

		profileInfoCacheModel.nationality = getNationality();

		String nationality = profileInfoCacheModel.nationality;

		if ((nationality != null) && (nationality.length() == 0)) {
			profileInfoCacheModel.nationality = null;
		}

		profileInfoCacheModel.nationalId = getNationalId();

		profileInfoCacheModel.passportId = getPassportId();

		Date passportExpireDate = getPassportExpireDate();

		if (passportExpireDate != null) {
			profileInfoCacheModel.passportExpireDate =
				passportExpireDate.getTime();
		}
		else {
			profileInfoCacheModel.passportExpireDate = Long.MIN_VALUE;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			profileInfoCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			profileInfoCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		profileInfoCacheModel.currentEducationTrainingStatus =
			getCurrentEducationTrainingStatus();

		String currentEducationTrainingStatus =
			profileInfoCacheModel.currentEducationTrainingStatus;

		if ((currentEducationTrainingStatus != null) &&
			(currentEducationTrainingStatus.length() == 0)) {

			profileInfoCacheModel.currentEducationTrainingStatus = null;
		}

		profileInfoCacheModel.countryOfResidence = getCountryOfResidence();

		String countryOfResidence = profileInfoCacheModel.countryOfResidence;

		if ((countryOfResidence != null) &&
			(countryOfResidence.length() == 0)) {

			profileInfoCacheModel.countryOfResidence = null;
		}

		profileInfoCacheModel.cityOfResidence = getCityOfResidence();

		String cityOfResidence = profileInfoCacheModel.cityOfResidence;

		if ((cityOfResidence != null) && (cityOfResidence.length() == 0)) {
			profileInfoCacheModel.cityOfResidence = null;
		}

		profileInfoCacheModel.nationalAddress = getNationalAddress();

		String nationalAddress = profileInfoCacheModel.nationalAddress;

		if ((nationalAddress != null) && (nationalAddress.length() == 0)) {
			profileInfoCacheModel.nationalAddress = null;
		}

		profileInfoCacheModel.postalCode = getPostalCode();

		String postalCode = profileInfoCacheModel.postalCode;

		if ((postalCode != null) && (postalCode.length() == 0)) {
			profileInfoCacheModel.postalCode = null;
		}

		profileInfoCacheModel.street = getStreet();

		String street = profileInfoCacheModel.street;

		if ((street != null) && (street.length() == 0)) {
			profileInfoCacheModel.street = null;
		}

		profileInfoCacheModel.state = getState();

		String state = profileInfoCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			profileInfoCacheModel.state = null;
		}

		profileInfoCacheModel.about = getAbout();

		String about = profileInfoCacheModel.about;

		if ((about != null) && (about.length() == 0)) {
			profileInfoCacheModel.about = null;
		}

		profileInfoCacheModel.profileimage = getProfileimage();

		String profileimage = profileInfoCacheModel.profileimage;

		if ((profileimage != null) && (profileimage.length() == 0)) {
			profileInfoCacheModel.profileimage = null;
		}

		profileInfoCacheModel.universitygeneral = getUniversitygeneral();

		String universitygeneral = profileInfoCacheModel.universitygeneral;

		if ((universitygeneral != null) && (universitygeneral.length() == 0)) {
			profileInfoCacheModel.universitygeneral = null;
		}

		profileInfoCacheModel.currentworkposition = getCurrentworkposition();

		String currentworkposition = profileInfoCacheModel.currentworkposition;

		if ((currentworkposition != null) &&
			(currentworkposition.length() == 0)) {

			profileInfoCacheModel.currentworkposition = null;
		}

		profileInfoCacheModel.currentworklocation = getCurrentworklocation();

		String currentworklocation = profileInfoCacheModel.currentworklocation;

		if ((currentworklocation != null) &&
			(currentworklocation.length() == 0)) {

			profileInfoCacheModel.currentworklocation = null;
		}

		profileInfoCacheModel.educationField = getEducationField();

		String educationField = profileInfoCacheModel.educationField;

		if ((educationField != null) && (educationField.length() == 0)) {
			profileInfoCacheModel.educationField = null;
		}

		profileInfoCacheModel.isEmailVerified = getIsEmailVerified();

		String isEmailVerified = profileInfoCacheModel.isEmailVerified;

		if ((isEmailVerified != null) && (isEmailVerified.length() == 0)) {
			profileInfoCacheModel.isEmailVerified = null;
		}

		profileInfoCacheModel.isMobileVerified = getIsMobileVerified();

		String isMobileVerified = profileInfoCacheModel.isMobileVerified;

		if ((isMobileVerified != null) && (isMobileVerified.length() == 0)) {
			profileInfoCacheModel.isMobileVerified = null;
		}

		return profileInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<profileInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<profileInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((profileInfo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<profileInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<profileInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((profileInfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, profileInfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _title;
	private String _firstName;
	private String _fatherName;
	private String _grandfatherName;
	private String _familyName;
	private String _email;
	private long _primaryMobileNo;
	private long _secondaryMobileNo;
	private String _gender;
	private String _nationality;
	private long _nationalId;
	private long _passportId;
	private Date _passportExpireDate;
	private Date _dateOfBirth;
	private String _currentEducationTrainingStatus;
	private String _countryOfResidence;
	private String _cityOfResidence;
	private String _nationalAddress;
	private String _postalCode;
	private String _street;
	private String _state;
	private String _about;
	private String _profileimage;
	private String _universitygeneral;
	private String _currentworkposition;
	private String _currentworklocation;
	private String _educationField;
	private String _isEmailVerified;
	private String _isMobileVerified;
	private long _columnBitmask;
	private profileInfo _escapedModel;

}
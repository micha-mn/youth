/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.profileImage;
import basic.model.profileImageImageBlobModel;
import basic.model.profileImageModel;
import basic.model.profileImageSoap;

import basic.service.profileImageLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the profileImage service. Represents a row in the &quot;profileImage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>profileImageModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link profileImageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see profileImageImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class profileImageModelImpl
	extends BaseModelImpl<profileImage> implements profileImageModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile image model instance should use the <code>profileImage</code> interface instead.
	 */
	public static final String TABLE_NAME = "profileImage";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"userId", Types.BIGINT}, {"image", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("image", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table profileImage (uuid_ VARCHAR(75) null,id_ LONG not null primary key,userId LONG,image BLOB)";

	public static final String TABLE_SQL_DROP = "drop table profileImage";

	public static final String ORDER_BY_JPQL = " ORDER BY profileImage.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY profileImage.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static profileImage toModel(profileImageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		profileImage model = new profileImageImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setUserId(soapModel.getUserId());
		model.setImage(soapModel.getImage());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<profileImage> toModels(profileImageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<profileImage> models = new ArrayList<profileImage>(
			soapModels.length);

		for (profileImageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public profileImageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return profileImage.class;
	}

	@Override
	public String getModelClassName() {
		return profileImage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<profileImage, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<profileImage, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileImage, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((profileImage)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<profileImage, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<profileImage, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(profileImage)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<profileImage, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<profileImage, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, profileImage>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			profileImage.class.getClassLoader(), profileImage.class,
			ModelWrapper.class);

		try {
			Constructor<profileImage> constructor =
				(Constructor<profileImage>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<profileImage, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<profileImage, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<profileImage, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<profileImage, Object>>();
		Map<String, BiConsumer<profileImage, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<profileImage, ?>>();

		attributeGetterFunctions.put("uuid", profileImage::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<profileImage, String>)profileImage::setUuid);
		attributeGetterFunctions.put("id", profileImage::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<profileImage, Long>)profileImage::setId);
		attributeGetterFunctions.put("userId", profileImage::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<profileImage, Long>)profileImage::setUserId);
		attributeGetterFunctions.put("image", profileImage::getImage);
		attributeSetterBiConsumers.put(
			"image", (BiConsumer<profileImage, Blob>)profileImage::setImage);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Blob getImage() {
		if (_imageBlobModel == null) {
			try {
				_imageBlobModel =
					profileImageLocalServiceUtil.getImageBlobModel(
						getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_imageBlobModel != null) {
			blob = _imageBlobModel.getImageBlob();
		}

		return blob;
	}

	@Override
	public void setImage(Blob image) {
		if (_imageBlobModel == null) {
			_imageBlobModel = new profileImageImageBlobModel(
				getPrimaryKey(), image);
		}
		else {
			_imageBlobModel.setImageBlob(image);
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, profileImage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public profileImage toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, profileImage>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		profileImageImpl profileImageImpl = new profileImageImpl();

		profileImageImpl.setUuid(getUuid());
		profileImageImpl.setId(getId());
		profileImageImpl.setUserId(getUserId());

		profileImageImpl.resetOriginalValues();

		return profileImageImpl;
	}

	@Override
	public int compareTo(profileImage profileImage) {
		long primaryKey = profileImage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof profileImage)) {
			return false;
		}

		profileImage profileImage = (profileImage)obj;

		long primaryKey = profileImage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		profileImageModelImpl profileImageModelImpl = this;

		profileImageModelImpl._originalUuid = profileImageModelImpl._uuid;

		profileImageModelImpl._imageBlobModel = null;

		profileImageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<profileImage> toCacheModel() {
		profileImageCacheModel profileImageCacheModel =
			new profileImageCacheModel();

		profileImageCacheModel.uuid = getUuid();

		String uuid = profileImageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			profileImageCacheModel.uuid = null;
		}

		profileImageCacheModel.id = getId();

		profileImageCacheModel.userId = getUserId();

		return profileImageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", id=");
		sb.append(getId());
		sb.append(", userId=");
		sb.append(getUserId());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("basic.model.profileImage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, profileImage>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private long _userId;
	private profileImageImageBlobModel _imageBlobModel;
	private long _columnBitmask;
	private profileImage _escapedModel;

}
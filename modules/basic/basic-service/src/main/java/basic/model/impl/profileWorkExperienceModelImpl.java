/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.profileWorkExperience;
import basic.model.profileWorkExperienceModel;
import basic.model.profileWorkExperienceSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the profileWorkExperience service. Represents a row in the &quot;profileWorkExperience&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>profileWorkExperienceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link profileWorkExperienceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see profileWorkExperienceImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class profileWorkExperienceModelImpl
	extends BaseModelImpl<profileWorkExperience>
	implements profileWorkExperienceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile work experience model instance should use the <code>profileWorkExperience</code> interface instead.
	 */
	public static final String TABLE_NAME = "profileWorkExperience";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"Id", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"profileId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"company", Types.VARCHAR}, {"location", Types.VARCHAR},
		{"startDate", Types.TIMESTAMP}, {"endDate", Types.TIMESTAMP},
		{"description", Types.VARCHAR}, {"currentWorkStatus", Types.VARCHAR},
		{"workExperience", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("profileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("company", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("location", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("startDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("endDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentWorkStatus", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("workExperience", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table profileWorkExperience (uuid_ VARCHAR(75) null,Id LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,profileId LONG,title VARCHAR(75) null,company VARCHAR(75) null,location VARCHAR(75) null,startDate DATE null,endDate DATE null,description VARCHAR(75) null,currentWorkStatus VARCHAR(75) null,workExperience VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table profileWorkExperience";

	public static final String ORDER_BY_JPQL =
		" ORDER BY profileWorkExperience.Id ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY profileWorkExperience.Id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static profileWorkExperience toModel(
		profileWorkExperienceSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		profileWorkExperience model = new profileWorkExperienceImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProfileId(soapModel.getProfileId());
		model.setTitle(soapModel.getTitle());
		model.setCompany(soapModel.getCompany());
		model.setLocation(soapModel.getLocation());
		model.setStartDate(soapModel.getStartDate());
		model.setEndDate(soapModel.getEndDate());
		model.setDescription(soapModel.getDescription());
		model.setCurrentWorkStatus(soapModel.getCurrentWorkStatus());
		model.setWorkExperience(soapModel.getWorkExperience());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<profileWorkExperience> toModels(
		profileWorkExperienceSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<profileWorkExperience> models =
			new ArrayList<profileWorkExperience>(soapModels.length);

		for (profileWorkExperienceSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public profileWorkExperienceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return profileWorkExperience.class;
	}

	@Override
	public String getModelClassName() {
		return profileWorkExperience.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<profileWorkExperience, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<profileWorkExperience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileWorkExperience, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((profileWorkExperience)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<profileWorkExperience, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<profileWorkExperience, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(profileWorkExperience)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<profileWorkExperience, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<profileWorkExperience, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, profileWorkExperience>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			profileWorkExperience.class.getClassLoader(),
			profileWorkExperience.class, ModelWrapper.class);

		try {
			Constructor<profileWorkExperience> constructor =
				(Constructor<profileWorkExperience>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<profileWorkExperience, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<profileWorkExperience, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<profileWorkExperience, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<profileWorkExperience, Object>>();
		Map<String, BiConsumer<profileWorkExperience, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<profileWorkExperience, ?>>();

		attributeGetterFunctions.put("uuid", profileWorkExperience::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setUuid);
		attributeGetterFunctions.put("Id", profileWorkExperience::getId);
		attributeSetterBiConsumers.put(
			"Id",
			(BiConsumer<profileWorkExperience, Long>)
				profileWorkExperience::setId);
		attributeGetterFunctions.put(
			"groupId", profileWorkExperience::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<profileWorkExperience, Long>)
				profileWorkExperience::setGroupId);
		attributeGetterFunctions.put(
			"companyId", profileWorkExperience::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<profileWorkExperience, Long>)
				profileWorkExperience::setCompanyId);
		attributeGetterFunctions.put(
			"userId", profileWorkExperience::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<profileWorkExperience, Long>)
				profileWorkExperience::setUserId);
		attributeGetterFunctions.put(
			"userName", profileWorkExperience::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setUserName);
		attributeGetterFunctions.put(
			"createDate", profileWorkExperience::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<profileWorkExperience, Date>)
				profileWorkExperience::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", profileWorkExperience::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<profileWorkExperience, Date>)
				profileWorkExperience::setModifiedDate);
		attributeGetterFunctions.put(
			"profileId", profileWorkExperience::getProfileId);
		attributeSetterBiConsumers.put(
			"profileId",
			(BiConsumer<profileWorkExperience, Long>)
				profileWorkExperience::setProfileId);
		attributeGetterFunctions.put("title", profileWorkExperience::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setTitle);
		attributeGetterFunctions.put(
			"company", profileWorkExperience::getCompany);
		attributeSetterBiConsumers.put(
			"company",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setCompany);
		attributeGetterFunctions.put(
			"location", profileWorkExperience::getLocation);
		attributeSetterBiConsumers.put(
			"location",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setLocation);
		attributeGetterFunctions.put(
			"startDate", profileWorkExperience::getStartDate);
		attributeSetterBiConsumers.put(
			"startDate",
			(BiConsumer<profileWorkExperience, Date>)
				profileWorkExperience::setStartDate);
		attributeGetterFunctions.put(
			"endDate", profileWorkExperience::getEndDate);
		attributeSetterBiConsumers.put(
			"endDate",
			(BiConsumer<profileWorkExperience, Date>)
				profileWorkExperience::setEndDate);
		attributeGetterFunctions.put(
			"description", profileWorkExperience::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setDescription);
		attributeGetterFunctions.put(
			"currentWorkStatus", profileWorkExperience::getCurrentWorkStatus);
		attributeSetterBiConsumers.put(
			"currentWorkStatus",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setCurrentWorkStatus);
		attributeGetterFunctions.put(
			"workExperience", profileWorkExperience::getWorkExperience);
		attributeSetterBiConsumers.put(
			"workExperience",
			(BiConsumer<profileWorkExperience, String>)
				profileWorkExperience::setWorkExperience);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getProfileId() {
		return _profileId;
	}

	@Override
	public void setProfileId(long profileId) {
		_profileId = profileId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getCompany() {
		if (_company == null) {
			return "";
		}
		else {
			return _company;
		}
	}

	@Override
	public void setCompany(String company) {
		_company = company;
	}

	@JSON
	@Override
	public String getLocation() {
		if (_location == null) {
			return "";
		}
		else {
			return _location;
		}
	}

	@Override
	public void setLocation(String location) {
		_location = location;
	}

	@JSON
	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getCurrentWorkStatus() {
		if (_currentWorkStatus == null) {
			return "";
		}
		else {
			return _currentWorkStatus;
		}
	}

	@Override
	public void setCurrentWorkStatus(String currentWorkStatus) {
		_currentWorkStatus = currentWorkStatus;
	}

	@JSON
	@Override
	public String getWorkExperience() {
		if (_workExperience == null) {
			return "";
		}
		else {
			return _workExperience;
		}
	}

	@Override
	public void setWorkExperience(String workExperience) {
		_workExperience = workExperience;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(profileWorkExperience.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), profileWorkExperience.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public profileWorkExperience toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, profileWorkExperience>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		profileWorkExperienceImpl profileWorkExperienceImpl =
			new profileWorkExperienceImpl();

		profileWorkExperienceImpl.setUuid(getUuid());
		profileWorkExperienceImpl.setId(getId());
		profileWorkExperienceImpl.setGroupId(getGroupId());
		profileWorkExperienceImpl.setCompanyId(getCompanyId());
		profileWorkExperienceImpl.setUserId(getUserId());
		profileWorkExperienceImpl.setUserName(getUserName());
		profileWorkExperienceImpl.setCreateDate(getCreateDate());
		profileWorkExperienceImpl.setModifiedDate(getModifiedDate());
		profileWorkExperienceImpl.setProfileId(getProfileId());
		profileWorkExperienceImpl.setTitle(getTitle());
		profileWorkExperienceImpl.setCompany(getCompany());
		profileWorkExperienceImpl.setLocation(getLocation());
		profileWorkExperienceImpl.setStartDate(getStartDate());
		profileWorkExperienceImpl.setEndDate(getEndDate());
		profileWorkExperienceImpl.setDescription(getDescription());
		profileWorkExperienceImpl.setCurrentWorkStatus(getCurrentWorkStatus());
		profileWorkExperienceImpl.setWorkExperience(getWorkExperience());

		profileWorkExperienceImpl.resetOriginalValues();

		return profileWorkExperienceImpl;
	}

	@Override
	public int compareTo(profileWorkExperience profileWorkExperience) {
		long primaryKey = profileWorkExperience.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof profileWorkExperience)) {
			return false;
		}

		profileWorkExperience profileWorkExperience =
			(profileWorkExperience)obj;

		long primaryKey = profileWorkExperience.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		profileWorkExperienceModelImpl profileWorkExperienceModelImpl = this;

		profileWorkExperienceModelImpl._originalUuid =
			profileWorkExperienceModelImpl._uuid;

		profileWorkExperienceModelImpl._originalGroupId =
			profileWorkExperienceModelImpl._groupId;

		profileWorkExperienceModelImpl._setOriginalGroupId = false;

		profileWorkExperienceModelImpl._originalCompanyId =
			profileWorkExperienceModelImpl._companyId;

		profileWorkExperienceModelImpl._setOriginalCompanyId = false;

		profileWorkExperienceModelImpl._setModifiedDate = false;

		profileWorkExperienceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<profileWorkExperience> toCacheModel() {
		profileWorkExperienceCacheModel profileWorkExperienceCacheModel =
			new profileWorkExperienceCacheModel();

		profileWorkExperienceCacheModel.uuid = getUuid();

		String uuid = profileWorkExperienceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			profileWorkExperienceCacheModel.uuid = null;
		}

		profileWorkExperienceCacheModel.Id = getId();

		profileWorkExperienceCacheModel.groupId = getGroupId();

		profileWorkExperienceCacheModel.companyId = getCompanyId();

		profileWorkExperienceCacheModel.userId = getUserId();

		profileWorkExperienceCacheModel.userName = getUserName();

		String userName = profileWorkExperienceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			profileWorkExperienceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			profileWorkExperienceCacheModel.createDate = createDate.getTime();
		}
		else {
			profileWorkExperienceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			profileWorkExperienceCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			profileWorkExperienceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		profileWorkExperienceCacheModel.profileId = getProfileId();

		profileWorkExperienceCacheModel.title = getTitle();

		String title = profileWorkExperienceCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			profileWorkExperienceCacheModel.title = null;
		}

		profileWorkExperienceCacheModel.company = getCompany();

		String company = profileWorkExperienceCacheModel.company;

		if ((company != null) && (company.length() == 0)) {
			profileWorkExperienceCacheModel.company = null;
		}

		profileWorkExperienceCacheModel.location = getLocation();

		String location = profileWorkExperienceCacheModel.location;

		if ((location != null) && (location.length() == 0)) {
			profileWorkExperienceCacheModel.location = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			profileWorkExperienceCacheModel.startDate = startDate.getTime();
		}
		else {
			profileWorkExperienceCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			profileWorkExperienceCacheModel.endDate = endDate.getTime();
		}
		else {
			profileWorkExperienceCacheModel.endDate = Long.MIN_VALUE;
		}

		profileWorkExperienceCacheModel.description = getDescription();

		String description = profileWorkExperienceCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			profileWorkExperienceCacheModel.description = null;
		}

		profileWorkExperienceCacheModel.currentWorkStatus =
			getCurrentWorkStatus();

		String currentWorkStatus =
			profileWorkExperienceCacheModel.currentWorkStatus;

		if ((currentWorkStatus != null) && (currentWorkStatus.length() == 0)) {
			profileWorkExperienceCacheModel.currentWorkStatus = null;
		}

		profileWorkExperienceCacheModel.workExperience = getWorkExperience();

		String workExperience = profileWorkExperienceCacheModel.workExperience;

		if ((workExperience != null) && (workExperience.length() == 0)) {
			profileWorkExperienceCacheModel.workExperience = null;
		}

		return profileWorkExperienceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<profileWorkExperience, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<profileWorkExperience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileWorkExperience, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(
				attributeGetterFunction.apply((profileWorkExperience)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<profileWorkExperience, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<profileWorkExperience, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<profileWorkExperience, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((profileWorkExperience)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, profileWorkExperience>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _Id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _profileId;
	private String _title;
	private String _company;
	private String _location;
	private Date _startDate;
	private Date _endDate;
	private String _description;
	private String _currentWorkStatus;
	private String _workExperience;
	private long _columnBitmask;
	private profileWorkExperience _escapedModel;

}
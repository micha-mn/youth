/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.Journey;
import basic.model.JourneyModel;
import basic.model.JourneyPictureBlobBlobModel;

import basic.service.JourneyLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the Journey service. Represents a row in the &quot;journey&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>JourneyModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link JourneyImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see JourneyImpl
 * @generated
 */
@ProviderType
public class JourneyModelImpl
	extends BaseModelImpl<Journey> implements JourneyModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a journey model instance should use the <code>Journey</code> interface instead.
	 */
	public static final String TABLE_NAME = "journey";

	public static final Object[][] TABLE_COLUMNS = {
		{"journeyId", Types.BIGINT}, {"userId", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"description", Types.VARCHAR},
		{"pictureBlob", Types.BLOB}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("journeyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pictureBlob", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE =
		"create table journey (journeyId LONG not null primary key,userId VARCHAR(75) null,title VARCHAR(75) null,description VARCHAR(75) null,pictureBlob BLOB)";

	public static final String TABLE_SQL_DROP = "drop table journey";

	public static final String ORDER_BY_JPQL =
		" ORDER BY journey.journeyId ASC";

	public static final String ORDER_BY_SQL = " ORDER BY journey.journeyId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public JourneyModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _journeyId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setJourneyId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _journeyId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Journey.class;
	}

	@Override
	public String getModelClassName() {
		return Journey.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Journey, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Journey, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Journey, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Journey)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Journey, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Journey, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Journey)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Journey, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Journey, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, Journey>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			Journey.class.getClassLoader(), Journey.class, ModelWrapper.class);

		try {
			Constructor<Journey> constructor =
				(Constructor<Journey>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<Journey, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Journey, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Journey, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Journey, Object>>();
		Map<String, BiConsumer<Journey, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Journey, ?>>();

		attributeGetterFunctions.put("journeyId", Journey::getJourneyId);
		attributeSetterBiConsumers.put(
			"journeyId", (BiConsumer<Journey, Long>)Journey::setJourneyId);
		attributeGetterFunctions.put("userId", Journey::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Journey, String>)Journey::setUserId);
		attributeGetterFunctions.put("title", Journey::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<Journey, String>)Journey::setTitle);
		attributeGetterFunctions.put("description", Journey::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<Journey, String>)Journey::setDescription);
		attributeGetterFunctions.put("pictureBlob", Journey::getPictureBlob);
		attributeSetterBiConsumers.put(
			"pictureBlob", (BiConsumer<Journey, Blob>)Journey::setPictureBlob);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getJourneyId() {
		return _journeyId;
	}

	@Override
	public void setJourneyId(long journeyId) {
		_journeyId = journeyId;
	}

	@Override
	public String getUserId() {
		if (_userId == null) {
			return "";
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Blob getPictureBlob() {
		if (_pictureBlobBlobModel == null) {
			try {
				_pictureBlobBlobModel =
					JourneyLocalServiceUtil.getPictureBlobBlobModel(
						getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_pictureBlobBlobModel != null) {
			blob = _pictureBlobBlobModel.getPictureBlobBlob();
		}

		return blob;
	}

	@Override
	public void setPictureBlob(Blob pictureBlob) {
		if (_pictureBlobBlobModel == null) {
			_pictureBlobBlobModel = new JourneyPictureBlobBlobModel(
				getPrimaryKey(), pictureBlob);
		}
		else {
			_pictureBlobBlobModel.setPictureBlobBlob(pictureBlob);
		}
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, Journey.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Journey toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Journey>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		JourneyImpl journeyImpl = new JourneyImpl();

		journeyImpl.setJourneyId(getJourneyId());
		journeyImpl.setUserId(getUserId());
		journeyImpl.setTitle(getTitle());
		journeyImpl.setDescription(getDescription());

		journeyImpl.resetOriginalValues();

		return journeyImpl;
	}

	@Override
	public int compareTo(Journey journey) {
		long primaryKey = journey.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Journey)) {
			return false;
		}

		Journey journey = (Journey)obj;

		long primaryKey = journey.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		JourneyModelImpl journeyModelImpl = this;

		journeyModelImpl._pictureBlobBlobModel = null;
	}

	@Override
	public CacheModel<Journey> toCacheModel() {
		JourneyCacheModel journeyCacheModel = new JourneyCacheModel();

		journeyCacheModel.journeyId = getJourneyId();

		journeyCacheModel.userId = getUserId();

		String userId = journeyCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			journeyCacheModel.userId = null;
		}

		journeyCacheModel.title = getTitle();

		String title = journeyCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			journeyCacheModel.title = null;
		}

		journeyCacheModel.description = getDescription();

		String description = journeyCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			journeyCacheModel.description = null;
		}

		return journeyCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{journeyId=");
		sb.append(getJourneyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("basic.model.Journey");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>journeyId</column-name><column-value><![CDATA[");
		sb.append(getJourneyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Journey>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _journeyId;
	private String _userId;
	private String _title;
	private String _description;
	private JourneyPictureBlobBlobModel _pictureBlobBlobModel;
	private Journey _escapedModel;

}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.ImageCalendar;
import basic.model.ImageCalendarDataBlobModel;
import basic.model.ImageCalendarModel;
import basic.model.ImageCalendarSoap;

import basic.service.ImageCalendarLocalServiceUtil;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the ImageCalendar service. Represents a row in the &quot;ImageCalendar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>ImageCalendarModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ImageCalendarImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ImageCalendarImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ImageCalendarModelImpl
	extends BaseModelImpl<ImageCalendar> implements ImageCalendarModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a image calendar model instance should use the <code>ImageCalendar</code> interface instead.
	 */
	public static final String TABLE_NAME = "ImageCalendar";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"Id", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"data_", Types.BLOB}, {"eventId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Id", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("data_", Types.BLOB);
		TABLE_COLUMNS_MAP.put("eventId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ImageCalendar (uuid_ VARCHAR(75) null,Id LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,data_ BLOB,eventId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table ImageCalendar";

	public static final String ORDER_BY_JPQL = " ORDER BY imageCalendar.Id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY ImageCalendar.Id ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long ID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ImageCalendar toModel(ImageCalendarSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ImageCalendar model = new ImageCalendarImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setData(soapModel.getData());
		model.setEventId(soapModel.getEventId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ImageCalendar> toModels(ImageCalendarSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ImageCalendar> models = new ArrayList<ImageCalendar>(
			soapModels.length);

		for (ImageCalendarSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public ImageCalendarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _Id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _Id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ImageCalendar.class;
	}

	@Override
	public String getModelClassName() {
		return ImageCalendar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<ImageCalendar, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<ImageCalendar, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<ImageCalendar, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((ImageCalendar)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<ImageCalendar, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<ImageCalendar, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(ImageCalendar)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<ImageCalendar, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<ImageCalendar, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, ImageCalendar>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			ImageCalendar.class.getClassLoader(), ImageCalendar.class,
			ModelWrapper.class);

		try {
			Constructor<ImageCalendar> constructor =
				(Constructor<ImageCalendar>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<ImageCalendar, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<ImageCalendar, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<ImageCalendar, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<ImageCalendar, Object>>();
		Map<String, BiConsumer<ImageCalendar, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<ImageCalendar, ?>>();

		attributeGetterFunctions.put("uuid", ImageCalendar::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<ImageCalendar, String>)ImageCalendar::setUuid);
		attributeGetterFunctions.put("Id", ImageCalendar::getId);
		attributeSetterBiConsumers.put(
			"Id", (BiConsumer<ImageCalendar, Long>)ImageCalendar::setId);
		attributeGetterFunctions.put("groupId", ImageCalendar::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<ImageCalendar, Long>)ImageCalendar::setGroupId);
		attributeGetterFunctions.put("companyId", ImageCalendar::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<ImageCalendar, Long>)ImageCalendar::setCompanyId);
		attributeGetterFunctions.put("userId", ImageCalendar::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<ImageCalendar, Long>)ImageCalendar::setUserId);
		attributeGetterFunctions.put("userName", ImageCalendar::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<ImageCalendar, String>)ImageCalendar::setUserName);
		attributeGetterFunctions.put(
			"createDate", ImageCalendar::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<ImageCalendar, Date>)ImageCalendar::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", ImageCalendar::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<ImageCalendar, Date>)ImageCalendar::setModifiedDate);
		attributeGetterFunctions.put("data", ImageCalendar::getData);
		attributeSetterBiConsumers.put(
			"data", (BiConsumer<ImageCalendar, Blob>)ImageCalendar::setData);
		attributeGetterFunctions.put("eventId", ImageCalendar::getEventId);
		attributeSetterBiConsumers.put(
			"eventId",
			(BiConsumer<ImageCalendar, String>)ImageCalendar::setEventId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _Id;
	}

	@Override
	public void setId(long Id) {
		_Id = Id;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public Blob getData() {
		if (_dataBlobModel == null) {
			try {
				_dataBlobModel = ImageCalendarLocalServiceUtil.getDataBlobModel(
					getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_dataBlobModel != null) {
			blob = _dataBlobModel.getDataBlob();
		}

		return blob;
	}

	@Override
	public void setData(Blob data) {
		if (_dataBlobModel == null) {
			_dataBlobModel = new ImageCalendarDataBlobModel(
				getPrimaryKey(), data);
		}
		else {
			_dataBlobModel.setDataBlob(data);
		}
	}

	@JSON
	@Override
	public String getEventId() {
		if (_eventId == null) {
			return "";
		}
		else {
			return _eventId;
		}
	}

	@Override
	public void setEventId(String eventId) {
		_eventId = eventId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(ImageCalendar.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), ImageCalendar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ImageCalendar toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, ImageCalendar>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ImageCalendarImpl imageCalendarImpl = new ImageCalendarImpl();

		imageCalendarImpl.setUuid(getUuid());
		imageCalendarImpl.setId(getId());
		imageCalendarImpl.setGroupId(getGroupId());
		imageCalendarImpl.setCompanyId(getCompanyId());
		imageCalendarImpl.setUserId(getUserId());
		imageCalendarImpl.setUserName(getUserName());
		imageCalendarImpl.setCreateDate(getCreateDate());
		imageCalendarImpl.setModifiedDate(getModifiedDate());
		imageCalendarImpl.setEventId(getEventId());

		imageCalendarImpl.resetOriginalValues();

		return imageCalendarImpl;
	}

	@Override
	public int compareTo(ImageCalendar imageCalendar) {
		long primaryKey = imageCalendar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ImageCalendar)) {
			return false;
		}

		ImageCalendar imageCalendar = (ImageCalendar)obj;

		long primaryKey = imageCalendar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		ImageCalendarModelImpl imageCalendarModelImpl = this;

		imageCalendarModelImpl._originalUuid = imageCalendarModelImpl._uuid;

		imageCalendarModelImpl._originalGroupId =
			imageCalendarModelImpl._groupId;

		imageCalendarModelImpl._setOriginalGroupId = false;

		imageCalendarModelImpl._originalCompanyId =
			imageCalendarModelImpl._companyId;

		imageCalendarModelImpl._setOriginalCompanyId = false;

		imageCalendarModelImpl._setModifiedDate = false;

		imageCalendarModelImpl._dataBlobModel = null;

		imageCalendarModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ImageCalendar> toCacheModel() {
		ImageCalendarCacheModel imageCalendarCacheModel =
			new ImageCalendarCacheModel();

		imageCalendarCacheModel.uuid = getUuid();

		String uuid = imageCalendarCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			imageCalendarCacheModel.uuid = null;
		}

		imageCalendarCacheModel.Id = getId();

		imageCalendarCacheModel.groupId = getGroupId();

		imageCalendarCacheModel.companyId = getCompanyId();

		imageCalendarCacheModel.userId = getUserId();

		imageCalendarCacheModel.userName = getUserName();

		String userName = imageCalendarCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			imageCalendarCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			imageCalendarCacheModel.createDate = createDate.getTime();
		}
		else {
			imageCalendarCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			imageCalendarCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			imageCalendarCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		imageCalendarCacheModel.eventId = getEventId();

		String eventId = imageCalendarCacheModel.eventId;

		if ((eventId != null) && (eventId.length() == 0)) {
			imageCalendarCacheModel.eventId = null;
		}

		return imageCalendarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", Id=");
		sb.append(getId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("basic.model.ImageCalendar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>Id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, ImageCalendar>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _Id;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private ImageCalendarDataBlobModel _dataBlobModel;
	private String _eventId;
	private long _columnBitmask;
	private ImageCalendar _escapedModel;

}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.formeventusertable;
import basic.model.formeventusertableModel;
import basic.model.formeventusertableSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the formeventusertable service. Represents a row in the &quot;formeventusertable&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>formeventusertableModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link formeventusertableImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see formeventusertableImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class formeventusertableModelImpl
	extends BaseModelImpl<formeventusertable>
	implements formeventusertableModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a formeventusertable model instance should use the <code>formeventusertable</code> interface instead.
	 */
	public static final String TABLE_NAME = "formeventusertable";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"ID", Types.BIGINT},
		{"userId", Types.VARCHAR}, {"eventId", Types.VARCHAR},
		{"ddmFormInstanceId", Types.VARCHAR},
		{"ddmFormInstanceRecordVersionId", Types.VARCHAR},
		{"statusCol", Types.VARCHAR}, {"formId", Types.VARCHAR},
		{"reviewerUserId", Types.VARCHAR}, {"reviewerComments", Types.VARCHAR},
		{"ddmFormInstanceRecordVersion", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("eventId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ddmFormInstanceId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ddmFormInstanceRecordVersionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusCol", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("formId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewerUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reviewerComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ddmFormInstanceRecordVersion", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table formeventusertable (uuid_ VARCHAR(75) null,ID LONG not null primary key,userId VARCHAR(75) null,eventId VARCHAR(75) null,ddmFormInstanceId VARCHAR(75) null,ddmFormInstanceRecordVersionId VARCHAR(75) null,statusCol VARCHAR(75) null,formId VARCHAR(75) null,reviewerUserId VARCHAR(75) null,reviewerComments VARCHAR(75) null,ddmFormInstanceRecordVersion VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table formeventusertable";

	public static final String ORDER_BY_JPQL =
		" ORDER BY formeventusertable.ID ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY formeventusertable.ID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static formeventusertable toModel(formeventusertableSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		formeventusertable model = new formeventusertableImpl();

		model.setUuid(soapModel.getUuid());
		model.setID(soapModel.getID());
		model.setUserId(soapModel.getUserId());
		model.setEventId(soapModel.getEventId());
		model.setDdmFormInstanceId(soapModel.getDdmFormInstanceId());
		model.setDdmFormInstanceRecordVersionId(
			soapModel.getDdmFormInstanceRecordVersionId());
		model.setStatusCol(soapModel.getStatusCol());
		model.setFormId(soapModel.getFormId());
		model.setReviewerUserId(soapModel.getReviewerUserId());
		model.setReviewerComments(soapModel.getReviewerComments());
		model.setDdmFormInstanceRecordVersion(
			soapModel.getDdmFormInstanceRecordVersion());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<formeventusertable> toModels(
		formeventusertableSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<formeventusertable> models = new ArrayList<formeventusertable>(
			soapModels.length);

		for (formeventusertableSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public formeventusertableModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return formeventusertable.class;
	}

	@Override
	public String getModelClassName() {
		return formeventusertable.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<formeventusertable, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<formeventusertable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<formeventusertable, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((formeventusertable)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<formeventusertable, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<formeventusertable, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(formeventusertable)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<formeventusertable, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<formeventusertable, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, formeventusertable>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			formeventusertable.class.getClassLoader(), formeventusertable.class,
			ModelWrapper.class);

		try {
			Constructor<formeventusertable> constructor =
				(Constructor<formeventusertable>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<formeventusertable, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<formeventusertable, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<formeventusertable, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<formeventusertable, Object>>();
		Map<String, BiConsumer<formeventusertable, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<formeventusertable, ?>>();

		attributeGetterFunctions.put("uuid", formeventusertable::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setUuid);
		attributeGetterFunctions.put("ID", formeventusertable::getID);
		attributeSetterBiConsumers.put(
			"ID",
			(BiConsumer<formeventusertable, Long>)formeventusertable::setID);
		attributeGetterFunctions.put("userId", formeventusertable::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setUserId);
		attributeGetterFunctions.put("eventId", formeventusertable::getEventId);
		attributeSetterBiConsumers.put(
			"eventId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setEventId);
		attributeGetterFunctions.put(
			"ddmFormInstanceId", formeventusertable::getDdmFormInstanceId);
		attributeSetterBiConsumers.put(
			"ddmFormInstanceId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setDdmFormInstanceId);
		attributeGetterFunctions.put(
			"ddmFormInstanceRecordVersionId",
			formeventusertable::getDdmFormInstanceRecordVersionId);
		attributeSetterBiConsumers.put(
			"ddmFormInstanceRecordVersionId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setDdmFormInstanceRecordVersionId);
		attributeGetterFunctions.put(
			"statusCol", formeventusertable::getStatusCol);
		attributeSetterBiConsumers.put(
			"statusCol",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setStatusCol);
		attributeGetterFunctions.put("formId", formeventusertable::getFormId);
		attributeSetterBiConsumers.put(
			"formId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setFormId);
		attributeGetterFunctions.put(
			"reviewerUserId", formeventusertable::getReviewerUserId);
		attributeSetterBiConsumers.put(
			"reviewerUserId",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setReviewerUserId);
		attributeGetterFunctions.put(
			"reviewerComments", formeventusertable::getReviewerComments);
		attributeSetterBiConsumers.put(
			"reviewerComments",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setReviewerComments);
		attributeGetterFunctions.put(
			"ddmFormInstanceRecordVersion",
			formeventusertable::getDdmFormInstanceRecordVersion);
		attributeSetterBiConsumers.put(
			"ddmFormInstanceRecordVersion",
			(BiConsumer<formeventusertable, String>)
				formeventusertable::setDdmFormInstanceRecordVersion);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getID() {
		return _ID;
	}

	@Override
	public void setID(long ID) {
		_ID = ID;
	}

	@JSON
	@Override
	public String getUserId() {
		if (_userId == null) {
			return "";
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		_userId = userId;
	}

	@JSON
	@Override
	public String getEventId() {
		if (_eventId == null) {
			return "";
		}
		else {
			return _eventId;
		}
	}

	@Override
	public void setEventId(String eventId) {
		_eventId = eventId;
	}

	@JSON
	@Override
	public String getDdmFormInstanceId() {
		if (_ddmFormInstanceId == null) {
			return "";
		}
		else {
			return _ddmFormInstanceId;
		}
	}

	@Override
	public void setDdmFormInstanceId(String ddmFormInstanceId) {
		_ddmFormInstanceId = ddmFormInstanceId;
	}

	@JSON
	@Override
	public String getDdmFormInstanceRecordVersionId() {
		if (_ddmFormInstanceRecordVersionId == null) {
			return "";
		}
		else {
			return _ddmFormInstanceRecordVersionId;
		}
	}

	@Override
	public void setDdmFormInstanceRecordVersionId(
		String ddmFormInstanceRecordVersionId) {

		_ddmFormInstanceRecordVersionId = ddmFormInstanceRecordVersionId;
	}

	@JSON
	@Override
	public String getStatusCol() {
		if (_statusCol == null) {
			return "";
		}
		else {
			return _statusCol;
		}
	}

	@Override
	public void setStatusCol(String statusCol) {
		_statusCol = statusCol;
	}

	@JSON
	@Override
	public String getFormId() {
		if (_formId == null) {
			return "";
		}
		else {
			return _formId;
		}
	}

	@Override
	public void setFormId(String formId) {
		_formId = formId;
	}

	@JSON
	@Override
	public String getReviewerUserId() {
		if (_reviewerUserId == null) {
			return "";
		}
		else {
			return _reviewerUserId;
		}
	}

	@Override
	public void setReviewerUserId(String reviewerUserId) {
		_reviewerUserId = reviewerUserId;
	}

	@JSON
	@Override
	public String getReviewerComments() {
		if (_reviewerComments == null) {
			return "";
		}
		else {
			return _reviewerComments;
		}
	}

	@Override
	public void setReviewerComments(String reviewerComments) {
		_reviewerComments = reviewerComments;
	}

	@JSON
	@Override
	public String getDdmFormInstanceRecordVersion() {
		if (_ddmFormInstanceRecordVersion == null) {
			return "";
		}
		else {
			return _ddmFormInstanceRecordVersion;
		}
	}

	@Override
	public void setDdmFormInstanceRecordVersion(
		String ddmFormInstanceRecordVersion) {

		_ddmFormInstanceRecordVersion = ddmFormInstanceRecordVersion;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, formeventusertable.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public formeventusertable toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, formeventusertable>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		formeventusertableImpl formeventusertableImpl =
			new formeventusertableImpl();

		formeventusertableImpl.setUuid(getUuid());
		formeventusertableImpl.setID(getID());
		formeventusertableImpl.setUserId(getUserId());
		formeventusertableImpl.setEventId(getEventId());
		formeventusertableImpl.setDdmFormInstanceId(getDdmFormInstanceId());
		formeventusertableImpl.setDdmFormInstanceRecordVersionId(
			getDdmFormInstanceRecordVersionId());
		formeventusertableImpl.setStatusCol(getStatusCol());
		formeventusertableImpl.setFormId(getFormId());
		formeventusertableImpl.setReviewerUserId(getReviewerUserId());
		formeventusertableImpl.setReviewerComments(getReviewerComments());
		formeventusertableImpl.setDdmFormInstanceRecordVersion(
			getDdmFormInstanceRecordVersion());

		formeventusertableImpl.resetOriginalValues();

		return formeventusertableImpl;
	}

	@Override
	public int compareTo(formeventusertable formeventusertable) {
		long primaryKey = formeventusertable.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof formeventusertable)) {
			return false;
		}

		formeventusertable formeventusertable = (formeventusertable)obj;

		long primaryKey = formeventusertable.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		formeventusertableModelImpl formeventusertableModelImpl = this;

		formeventusertableModelImpl._originalUuid =
			formeventusertableModelImpl._uuid;

		formeventusertableModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<formeventusertable> toCacheModel() {
		formeventusertableCacheModel formeventusertableCacheModel =
			new formeventusertableCacheModel();

		formeventusertableCacheModel.uuid = getUuid();

		String uuid = formeventusertableCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			formeventusertableCacheModel.uuid = null;
		}

		formeventusertableCacheModel.ID = getID();

		formeventusertableCacheModel.userId = getUserId();

		String userId = formeventusertableCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			formeventusertableCacheModel.userId = null;
		}

		formeventusertableCacheModel.eventId = getEventId();

		String eventId = formeventusertableCacheModel.eventId;

		if ((eventId != null) && (eventId.length() == 0)) {
			formeventusertableCacheModel.eventId = null;
		}

		formeventusertableCacheModel.ddmFormInstanceId = getDdmFormInstanceId();

		String ddmFormInstanceId =
			formeventusertableCacheModel.ddmFormInstanceId;

		if ((ddmFormInstanceId != null) && (ddmFormInstanceId.length() == 0)) {
			formeventusertableCacheModel.ddmFormInstanceId = null;
		}

		formeventusertableCacheModel.ddmFormInstanceRecordVersionId =
			getDdmFormInstanceRecordVersionId();

		String ddmFormInstanceRecordVersionId =
			formeventusertableCacheModel.ddmFormInstanceRecordVersionId;

		if ((ddmFormInstanceRecordVersionId != null) &&
			(ddmFormInstanceRecordVersionId.length() == 0)) {

			formeventusertableCacheModel.ddmFormInstanceRecordVersionId = null;
		}

		formeventusertableCacheModel.statusCol = getStatusCol();

		String statusCol = formeventusertableCacheModel.statusCol;

		if ((statusCol != null) && (statusCol.length() == 0)) {
			formeventusertableCacheModel.statusCol = null;
		}

		formeventusertableCacheModel.formId = getFormId();

		String formId = formeventusertableCacheModel.formId;

		if ((formId != null) && (formId.length() == 0)) {
			formeventusertableCacheModel.formId = null;
		}

		formeventusertableCacheModel.reviewerUserId = getReviewerUserId();

		String reviewerUserId = formeventusertableCacheModel.reviewerUserId;

		if ((reviewerUserId != null) && (reviewerUserId.length() == 0)) {
			formeventusertableCacheModel.reviewerUserId = null;
		}

		formeventusertableCacheModel.reviewerComments = getReviewerComments();

		String reviewerComments = formeventusertableCacheModel.reviewerComments;

		if ((reviewerComments != null) && (reviewerComments.length() == 0)) {
			formeventusertableCacheModel.reviewerComments = null;
		}

		formeventusertableCacheModel.ddmFormInstanceRecordVersion =
			getDdmFormInstanceRecordVersion();

		String ddmFormInstanceRecordVersion =
			formeventusertableCacheModel.ddmFormInstanceRecordVersion;

		if ((ddmFormInstanceRecordVersion != null) &&
			(ddmFormInstanceRecordVersion.length() == 0)) {

			formeventusertableCacheModel.ddmFormInstanceRecordVersion = null;
		}

		return formeventusertableCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<formeventusertable, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<formeventusertable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<formeventusertable, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((formeventusertable)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<formeventusertable, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<formeventusertable, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<formeventusertable, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((formeventusertable)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, formeventusertable>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;

	private long _ID;

	private String _userId;
	private String _eventId;
	private String _ddmFormInstanceId;
	private String _ddmFormInstanceRecordVersionId;
	private String _statusCol;
	private String _formId;
	private String _reviewerUserId;
	private String _reviewerComments;
	private String _ddmFormInstanceRecordVersion;
	private long _columnBitmask;
	private formeventusertable _escapedModel;

}
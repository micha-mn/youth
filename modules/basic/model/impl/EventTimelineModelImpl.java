/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package basic.model.impl;

import basic.model.EventTimeline;
import basic.model.EventTimelineModel;
import basic.model.EventTimelineSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the EventTimeline service. Represents a row in the &quot;EventTimeline&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>EventTimelineModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventTimelineImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EventTimelineImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class EventTimelineModelImpl
	extends BaseModelImpl<EventTimeline> implements EventTimelineModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a event timeline model instance should use the <code>EventTimeline</code> interface instead.
	 */
	public static final String TABLE_NAME = "EventTimeline";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"id_", Types.BIGINT},
		{"Title", Types.VARCHAR}, {"Description", Types.VARCHAR},
		{"EventStartDay", Types.TIMESTAMP}, {"EventendDay", Types.TIMESTAMP},
		{"eventId", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("Title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("Description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("EventStartDay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("EventendDay", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("eventId", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table EventTimeline (uuid_ VARCHAR(75) null,id_ LONG not null primary key,Title VARCHAR(75) null,Description VARCHAR(75) null,EventStartDay DATE null,EventendDay DATE null,eventId VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table EventTimeline";

	public static final String ORDER_BY_JPQL = " ORDER BY eventTimeline.id ASC";

	public static final String ORDER_BY_SQL = " ORDER BY EventTimeline.id_ ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long ID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static EventTimeline toModel(EventTimelineSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		EventTimeline model = new EventTimelineImpl();

		model.setUuid(soapModel.getUuid());
		model.setId(soapModel.getId());
		model.setTitle(soapModel.getTitle());
		model.setDescription(soapModel.getDescription());
		model.setEventStartDay(soapModel.getEventStartDay());
		model.setEventendDay(soapModel.getEventendDay());
		model.setEventId(soapModel.getEventId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<EventTimeline> toModels(EventTimelineSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<EventTimeline> models = new ArrayList<EventTimeline>(
			soapModels.length);

		for (EventTimelineSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public EventTimelineModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EventTimeline.class;
	}

	@Override
	public String getModelClassName() {
		return EventTimeline.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<EventTimeline, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<EventTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EventTimeline, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((EventTimeline)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<EventTimeline, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<EventTimeline, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(EventTimeline)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<EventTimeline, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<EventTimeline, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, EventTimeline>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			EventTimeline.class.getClassLoader(), EventTimeline.class,
			ModelWrapper.class);

		try {
			Constructor<EventTimeline> constructor =
				(Constructor<EventTimeline>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<EventTimeline, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<EventTimeline, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<EventTimeline, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<EventTimeline, Object>>();
		Map<String, BiConsumer<EventTimeline, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<EventTimeline, ?>>();

		attributeGetterFunctions.put("uuid", EventTimeline::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<EventTimeline, String>)EventTimeline::setUuid);
		attributeGetterFunctions.put("id", EventTimeline::getId);
		attributeSetterBiConsumers.put(
			"id", (BiConsumer<EventTimeline, Long>)EventTimeline::setId);
		attributeGetterFunctions.put("Title", EventTimeline::getTitle);
		attributeSetterBiConsumers.put(
			"Title",
			(BiConsumer<EventTimeline, String>)EventTimeline::setTitle);
		attributeGetterFunctions.put(
			"Description", EventTimeline::getDescription);
		attributeSetterBiConsumers.put(
			"Description",
			(BiConsumer<EventTimeline, String>)EventTimeline::setDescription);
		attributeGetterFunctions.put(
			"EventStartDay", EventTimeline::getEventStartDay);
		attributeSetterBiConsumers.put(
			"EventStartDay",
			(BiConsumer<EventTimeline, Date>)EventTimeline::setEventStartDay);
		attributeGetterFunctions.put(
			"EventendDay", EventTimeline::getEventendDay);
		attributeSetterBiConsumers.put(
			"EventendDay",
			(BiConsumer<EventTimeline, Date>)EventTimeline::setEventendDay);
		attributeGetterFunctions.put("eventId", EventTimeline::getEventId);
		attributeSetterBiConsumers.put(
			"eventId",
			(BiConsumer<EventTimeline, String>)EventTimeline::setEventId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_Title == null) {
			return "";
		}
		else {
			return _Title;
		}
	}

	@Override
	public void setTitle(String Title) {
		_Title = Title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_Description == null) {
			return "";
		}
		else {
			return _Description;
		}
	}

	@Override
	public void setDescription(String Description) {
		_Description = Description;
	}

	@JSON
	@Override
	public Date getEventStartDay() {
		return _EventStartDay;
	}

	@Override
	public void setEventStartDay(Date EventStartDay) {
		_EventStartDay = EventStartDay;
	}

	@JSON
	@Override
	public Date getEventendDay() {
		return _EventendDay;
	}

	@Override
	public void setEventendDay(Date EventendDay) {
		_EventendDay = EventendDay;
	}

	@JSON
	@Override
	public String getEventId() {
		if (_eventId == null) {
			return "";
		}
		else {
			return _eventId;
		}
	}

	@Override
	public void setEventId(String eventId) {
		_eventId = eventId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, EventTimeline.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventTimeline toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, EventTimeline>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EventTimelineImpl eventTimelineImpl = new EventTimelineImpl();

		eventTimelineImpl.setUuid(getUuid());
		eventTimelineImpl.setId(getId());
		eventTimelineImpl.setTitle(getTitle());
		eventTimelineImpl.setDescription(getDescription());
		eventTimelineImpl.setEventStartDay(getEventStartDay());
		eventTimelineImpl.setEventendDay(getEventendDay());
		eventTimelineImpl.setEventId(getEventId());

		eventTimelineImpl.resetOriginalValues();

		return eventTimelineImpl;
	}

	@Override
	public int compareTo(EventTimeline eventTimeline) {
		long primaryKey = eventTimeline.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EventTimeline)) {
			return false;
		}

		EventTimeline eventTimeline = (EventTimeline)obj;

		long primaryKey = eventTimeline.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		EventTimelineModelImpl eventTimelineModelImpl = this;

		eventTimelineModelImpl._originalUuid = eventTimelineModelImpl._uuid;

		eventTimelineModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventTimeline> toCacheModel() {
		EventTimelineCacheModel eventTimelineCacheModel =
			new EventTimelineCacheModel();

		eventTimelineCacheModel.uuid = getUuid();

		String uuid = eventTimelineCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			eventTimelineCacheModel.uuid = null;
		}

		eventTimelineCacheModel.id = getId();

		eventTimelineCacheModel.Title = getTitle();

		String Title = eventTimelineCacheModel.Title;

		if ((Title != null) && (Title.length() == 0)) {
			eventTimelineCacheModel.Title = null;
		}

		eventTimelineCacheModel.Description = getDescription();

		String Description = eventTimelineCacheModel.Description;

		if ((Description != null) && (Description.length() == 0)) {
			eventTimelineCacheModel.Description = null;
		}

		Date EventStartDay = getEventStartDay();

		if (EventStartDay != null) {
			eventTimelineCacheModel.EventStartDay = EventStartDay.getTime();
		}
		else {
			eventTimelineCacheModel.EventStartDay = Long.MIN_VALUE;
		}

		Date EventendDay = getEventendDay();

		if (EventendDay != null) {
			eventTimelineCacheModel.EventendDay = EventendDay.getTime();
		}
		else {
			eventTimelineCacheModel.EventendDay = Long.MIN_VALUE;
		}

		eventTimelineCacheModel.eventId = getEventId();

		String eventId = eventTimelineCacheModel.eventId;

		if ((eventId != null) && (eventId.length() == 0)) {
			eventTimelineCacheModel.eventId = null;
		}

		return eventTimelineCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<EventTimeline, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<EventTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EventTimeline, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((EventTimeline)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<EventTimeline, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<EventTimeline, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<EventTimeline, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((EventTimeline)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, EventTimeline>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _id;
	private String _Title;
	private String _Description;
	private Date _EventStartDay;
	private Date _EventendDay;
	private String _eventId;
	private long _columnBitmask;
	private EventTimeline _escapedModel;

}